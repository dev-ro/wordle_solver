name: Continuous Integration

on:
    pull_request:
        branches: [main, develop]
    push:
        branches: [develop]

jobs:
    flutter-ci:
        name: Flutter CI
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Setup Flutter
              uses: subosito/flutter-action@v2
              with:
                  flutter-version: '3.32.8'
                  channel: 'stable'
                  cache: true

            - name: Get Flutter dependencies
              run: flutter pub get

            - name: Verify Flutter installation
              run: flutter doctor -v

            - name: Analyze Flutter code
              run: flutter analyze --fatal-infos

            # Removed formatting check to speed up CI. Formatting is a developer responsibility.

            - name: Run Flutter tests
              run: flutter test --coverage

            - name: Upload coverage to Codecov
              uses: codecov/codecov-action@v4
              with:
                  file: coverage/lcov.info
                  fail_ci_if_error: false

            - name: Build Flutter web (debug)
              run: flutter build web --debug

            - name: Build Flutter Android APK (debug)
              run: flutter build apk --debug

    python-ci:
        name: Python Functions CI
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Python
              uses: actions/setup-python@v5
              with:
                  python-version: '3.12'

            - name: Install Python dependencies
              run: |
                  cd functions
                  python -m venv venv
                  source venv/bin/activate
                  pip install -r requirements.txt
                  pip install pytest pytest-cov black flake8 mypy

            - name: Check Python code formatting
              run: |
                  cd functions
                  source venv/bin/activate
                  black --check main.py

            - name: Lint Python code
              run: |
                  cd functions
                  source venv/bin/activate
                  flake8 main.py --max-line-length=100 --ignore=E203,W503

            - name: Type check Python code
              run: |
                  cd functions
                  source venv/bin/activate
                  mypy main.py --ignore-missing-imports

            - name: Test Python functions
              run: |
                  cd functions
                  source venv/bin/activate
                  if [ -f "test_main.py" ]; then
                    pytest test_main.py -v --cov=main
                  else
                    echo "⚠️ No Python tests found"
                  fi

    security-scan:
        name: Security Scan
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Python
              uses: actions/setup-python@v5
              with:
                  python-version: '3.12'

            - name: Python dependency vulnerabilities (pip-audit)
              run: |
                  python -m pip install --upgrade pip
                  pip install pip-audit
                  pip-audit -r functions/requirements.txt

            - name: Setup Go
              uses: actions/setup-go@v5
              with:
                  go-version: '1.22.x'

            - name: Install OSV-Scanner (go install)
              run: |
                  go install github.com/google/osv-scanner/v2/cmd/osv-scanner@latest
                  echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

            - name: Scan manifests with OSV-Scanner (Dart/Python)
              run: |
                  # Scan Flutter/Dart and Python manifests/locks
                  osv-scanner -r . || true

            - name: Install jq (for JSON parsing)
              run: sudo apt-get update && sudo apt-get install -y jq

            - name: Install trufflehog (prebuilt binary)
              run: |
                  set -euo pipefail
                  RELEASE_API="https://api.github.com/repos/trufflesecurity/trufflehog/releases/latest"
                  JSON=$(curl -sSL "$RELEASE_API")
                  # Prefer tar.gz for linux_amd64; fallback to raw binary if tar.gz isn't present
                  TARBALL_URL=$(echo "$JSON" | jq -r '.assets[] | select(.name | test("linux_amd64.*\\.tar\\.gz$")) | .browser_download_url' | head -n1)
                  if [ -z "$TARBALL_URL" ] || [ "$TARBALL_URL" = "null" ]; then
                    BINARY_URL=$(echo "$JSON" | jq -r '.assets[] | select(.name | test("linux_amd64$")) | .browser_download_url' | head -n1)
                  else
                    BINARY_URL=""
                  fi
                  if [ -n "$TARBALL_URL" ]; then
                    echo "Downloading tarball: $TARBALL_URL"
                    curl -sSL "$TARBALL_URL" -o trufflehog.tar.gz
                    tar -xzf trufflehog.tar.gz
                    BIN=$(find . -maxdepth 2 -type f -name trufflehog | head -n1)
                    chmod +x "$BIN"
                    sudo mv "$BIN" /usr/local/bin/trufflehog
                  elif [ -n "$BINARY_URL" ]; then
                    echo "Downloading binary: $BINARY_URL"
                    curl -sSL "$BINARY_URL" -o trufflehog
                    chmod +x trufflehog
                    sudo mv trufflehog /usr/local/bin/
                  else
                    echo "Failed to locate trufflehog linux_amd64 asset in latest release" >&2
                    exit 1
                  fi

            - name: Secret scan (trufflehog filesystem)
              run: trufflehog filesystem --no-update .
              continue-on-error: true

    bash-scripts-check:
        name: Bash Scripts Check
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Check bash scripts syntax
              run: |
                  for script in scripts/*.sh; do
                    echo "Checking $script..."
                    bash -n "$script"
                    echo "✅ $script syntax is valid"
                  done

            - name: Make scripts executable
              run: chmod +x scripts/*.sh

            - name: Test setup script
              run: ./scripts/setup.sh || true # Allow to fail in CI
